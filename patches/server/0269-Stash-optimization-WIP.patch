From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Tue, 29 Nov 2022 17:11:10 +0100
Subject: [PATCH] Stash optimization WIP.


diff --git a/build.gradle.kts b/build.gradle.kts
index ddaac25a3274a5973260cc37bb001af6afb08ac2..29ced8b41929e090167e76bf840a9b2ff25ce743 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -58,6 +58,7 @@ dependencies {
     // Pufferfish end
 
     implementation("io.methvin:directory-watcher:0.15.0") // MultiPaper
+    implementation("net.openhft:zero-allocation-hashing:0.16") // MultiPaper
 
     implementation("com.github.technove:AIR:fe3dbb4420") // Airplane - config
     implementation("com.github.technove:Flare:2c4a2114a0") // Airplane - flare
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index dd4bf3763e794b2756bfba29f993898cd4f64174..deef362850115281f7299cd5986f8d85c86739ae 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2054,7 +2054,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             }
         }
 
-        System.out.println("TIME " + String.valueOf(handleUseItemOn_totalTime));
+//        System.out.println("TIME " + String.valueOf(handleUseItemOn_totalTime));
         handleUseItemOn_totalTime += System.nanoTime() - start;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 8f4b029b67d3c33f5ae64f1974772496b2a21f21..ef3c6bde5a6607e58bd7622015628d944e886bad 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -737,6 +737,7 @@ public final class ItemStack {
             itemstack.setPopTime(this.getPopTime());
             if (this.tag != null) {
                 itemstack.tag = this.tag.copy();
+                itemstack.reduplicate();
             }
 
             return itemstack;
@@ -745,6 +746,8 @@ public final class ItemStack {
 
     // MultiPaper start
     public ItemStack rapidCloneItemStack(boolean origItem) {
+        return cloneItemStack(origItem);
+        /*
         if (!origItem && this.isEmpty()) {
             return ItemStack.EMPTY;
         } else {
@@ -754,7 +757,12 @@ public final class ItemStack {
             itemstack.tag = this.tag;
 
             return itemstack;
-        }
+        }*/
+    }
+
+    public void reduplicate() {
+        if (this.tag != null)
+            this.tag = xymb.NBTDeduplicator.instance().reduplicateTagNoCopy(this.tag);
     }
 
     public static boolean rapidItemStackMatch(ItemStack left, ItemStack right) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index abcd28498cfcf3fe6936f01f8e2a5a5e04118572..356f9b255f945b70ba2cf3dfd1dc3a215451a54b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -950,7 +950,11 @@ public class LevelChunk extends ChunkAccess {
 
     @Override
     public boolean isUnsaved() {
-        return super.isUnsaved() && !this.mustNotSave && !MultiPaper.isChunkExternal(this); // MultiPaper - only save if no one else owns it
+        var chunkKey = new puregero.multipaper.ChunkKey(this.level.serverLevelData.getLevelName(), this.locX, this.locZ);
+        boolean shouldBeWritten = xymb.DeduplicatorUpdateManager.shouldBeWritten(chunkKey);
+        boolean retval = (super.isUnsaved() || shouldBeWritten) && !this.mustNotSave && !MultiPaper.isChunkExternal(this); // MultiPaper - only save if no one else owns it
+        if (retval && shouldBeWritten) xymb.DeduplicatorUpdateManager.done(chunkKey);
+        return retval;
     }
     // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 30ac442049088200e9ab77a561c59cbc58aaa28f..7cc9d723787a5b981db94702e3f187cb8231f08d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -56,6 +56,7 @@ public class CraftInventory implements Inventory {
 
         for (int i = 0; i < size; i++) {
             net.minecraft.world.item.ItemStack mcItem = mcItems.get(i);
+            mcItem.reduplicate(); // Xymb
             items[i] = (mcItem.isEmpty()) ? null : CraftItemStack.asCraftMirror(mcItem);
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 03b4f18000d455e48044eb7a15cd667acef5f14d..e9b100e8dbd772c31b54c65ccf6dec11a6d6c62e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -57,6 +57,7 @@ public final class CraftItemStack extends ItemStack {
         if (original.isEmpty()) {
             return new ItemStack(Material.AIR);
         }
+        if (original != null) original.reduplicate(); // Xymb
         ItemStack stack = new ItemStack(CraftMagicNumbers.getMaterial(original.getItem()), original.getCount());
         if (CraftItemStack.hasItemMeta(original)) {
             stack.setItemMeta(CraftItemStack.getItemMeta(original));
@@ -65,6 +66,7 @@ public final class CraftItemStack extends ItemStack {
     }
 
     public static CraftItemStack asCraftMirror(net.minecraft.world.item.ItemStack original) {
+        if (original != null) original.reduplicate(); // Xymb
         return new CraftItemStack((original == null || original.isEmpty()) ? null : original);
     }
 
diff --git a/src/main/java/puregero/multipaper/ChunkKey.java b/src/main/java/puregero/multipaper/ChunkKey.java
index 928fe46b5061ff6a1acbec61eec698756e8ac124..a66d01e292e5cc4008b22c171ec09642da9939cc 100644
--- a/src/main/java/puregero/multipaper/ChunkKey.java
+++ b/src/main/java/puregero/multipaper/ChunkKey.java
@@ -42,5 +42,9 @@ public class ChunkKey {
     public int getZ() {
         return z;
     }
+
+    public String toString() {
+        return "<" + this.name + " " + this.x + " " + this.z + ">";
+    }
 }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 608b28aa26c119f5b2b778ad07e3d7ff7b67a53a..ef36230fc353bb710aa0df8c0e6b6ca18b759fe5 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -423,8 +423,12 @@ public class MultiPaper {
 
     public static CompoundTag readRegionFileNBT(String world, String path, int cx, int cz) throws IOException {
         DataInput in = readRegionFile(world, path, cx, cz);
-
-        return in == null ? null : NbtIo.read(in);
+        long start = System.nanoTime();
+        CompoundTag compoundTag = NbtIo.read(in);
+        xymb.NBTDeduplicator.deduplicateContainersOnChunkRead(compoundTag, new ChunkKey(world, cx, cz));
+        if (((System.nanoTime() - start) / 1000000.) > 50)
+            System.out.println("readRegionFileNBT_JUMBO_CHUNK_READ " + ((System.nanoTime() - start) / 1000000.) + " " + new ChunkKey(world, cx, cz));
+        return compoundTag;
     }
  
     public static void writeRegionFileNBT(File path, ChunkPos chunkPos, CompoundTag compoundTag) throws IOException {
@@ -436,7 +440,11 @@ public class MultiPaper {
     }
 
     public static void writeRegionFileNBT(String world, String path, int cx, int cz, CompoundTag compoundTag) throws IOException {
+        long start = System.nanoTime();
+        xymb.NBTDeduplicator.deduplicateContainersOnWrite(compoundTag);
         writeRegionFile(world, path, cx, cz, nbtToBytes(compoundTag));
+        if (((System.nanoTime() - start) / 1000000.) > 50)
+            System.out.println("WRITE_JUMBO_CHUNK " + ((System.nanoTime() - start) / 1000000.) + " " + world + " " + cx + " " + cz);
     }
 
     public static CompoundTag readLevel(String world) throws IOException {
diff --git a/src/main/java/puregero/multipaper/MultiPaperEnderChestHandler.java b/src/main/java/puregero/multipaper/MultiPaperEnderChestHandler.java
index d8074c83ab7d10c14e59f86402b724877dedfb67..fb59b45ffe3468c3fa2cee654758ae27912e964e 100644
--- a/src/main/java/puregero/multipaper/MultiPaperEnderChestHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperEnderChestHandler.java
@@ -47,7 +47,7 @@ public class MultiPaperEnderChestHandler implements ContainerListener {
         for (int i = 0; i < sentItems.length; i++) {
             ItemStack item = container.getItem(i);
             if (!item.equals(sentItems[i])) {
-                sentItems[i] = item.copy();
+                sentItems[i] = item.rapidCloneItemStack(true);
 
                 if (broadcastChanges) {
                     CompoundTag itemToSend = new CompoundTag();
diff --git a/src/main/java/puregero/multipaper/MultiPaperIO.java b/src/main/java/puregero/multipaper/MultiPaperIO.java
index 58ba5b252b48ba176b09506086932af0b3438796..fc56240b6b90cfa849ecb8357fece9f355de08e2 100644
--- a/src/main/java/puregero/multipaper/MultiPaperIO.java
+++ b/src/main/java/puregero/multipaper/MultiPaperIO.java
@@ -98,8 +98,15 @@ public class MultiPaperIO extends Thread implements IOHandler {
         CompletableFuture<CompoundTag> future = MultiPaper.readRegionFileAsync(key.getWorld(), path, key.getX(), key.getZ())
                 .thenApplyAsync(in -> {
                     try {
-                        return in == null ? null : NbtIo.read(in);
-                    } catch (IOException e) {
+                        if (in == null) return null;
+                        long start = System.nanoTime();
+                        CompoundTag compoundTag = NbtIo.read(in);
+                        xymb.NBTDeduplicator.deduplicateContainersOnChunkRead(compoundTag, key);
+                        if (((System.nanoTime() - start) / 1000000.) > 50)
+                            System.out.println("JUMBO_CHUNK_READ " + ((System.nanoTime() - start) / 1000000.) + " " + key);
+
+                        return compoundTag;
+                        } catch (IOException e) {
                         throw new RuntimeException(e);
                     }
                 }).exceptionally(exception -> {
@@ -107,9 +114,9 @@ public class MultiPaperIO extends Thread implements IOHandler {
                     return PaperFileIOThread.FAILURE_VALUE;
                 });
 
-        future.thenApply(nbt -> false).completeOnTimeout(true, 15, TimeUnit.SECONDS).thenAccept(timedout -> {
+        future.thenApply(nbt -> false).completeOnTimeout(true, 60, TimeUnit.SECONDS).thenAccept(timedout -> {
             if (timedout) {
-//                LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
+                LOGGER.warn("Timed out reading " + key.getWorld() + "," + path + "," + key.getX() + "," + key.getZ() + ", retrying...");
                 readChunk(key, path).thenAccept(future::complete);
             }
         });
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
index 7b6f86f4a314c4628071bdf54b5aa014b26c8d34..5edc90145a9aea2bb4e5f4dba403fc3320940d8d 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendChunkPacket.java
@@ -42,8 +42,10 @@ public class SendChunkPacket extends ExternalServerPacket {
                 data = new byte[0];
             } else {
                 long startTime = System.nanoTime();
+                tag = tag.copy();
+                xymb.NBTDeduplicator.deduplicateContainersOnWrite(tag);
                 data = MultiPaper.nbtToBytes(tag);
-                if (System.nanoTime() - startTime > 10000000) {
+                if (System.nanoTime() - startTime > 50000000) {
                     System.out.println("SEND_CHUNK_JUMBO_PACKET " + ((System.nanoTime() - startTime) / 1000000.) + " " + world + " " + cx + " " + cz);
                 }
             }
@@ -90,7 +92,12 @@ public class SendChunkPacket extends ExternalServerPacket {
                     return;
                 }
 
+                long startTime = System.nanoTime();
                 CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                xymb.NBTDeduplicator.deduplicateContainersOnChunkRead(tag, new ChunkKey(world, cx, cz));
+                if (System.nanoTime() - startTime > 50000000) {
+                    System.out.println("READ_CHUNK_JUMBO_PACKET " + ((System.nanoTime() - startTime) / 1000000.) + " " + world + " " + cx + " " + cz);
+                }
                 CraftWorld craftWorld = ((CraftWorld) Bukkit.getWorld(world));
                 ServerLevel level = craftWorld != null ? craftWorld.getHandle() : null;
                 ChunkHolder holder = level != null ? MultiPaper.getChunkHolder(world, cx, cz) : null;
diff --git a/src/main/java/xymb/DeduplicatorUpdateManager.java b/src/main/java/xymb/DeduplicatorUpdateManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..ea3bf4cf09db175ee205fd706e745fcd3db7720c
--- /dev/null
+++ b/src/main/java/xymb/DeduplicatorUpdateManager.java
@@ -0,0 +1,29 @@
+package xymb;
+
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import puregero.multipaper.ChunkKey;
+
+public class DeduplicatorUpdateManager {
+    static ObjectOpenHashSet<ChunkKey> set = new ObjectOpenHashSet<>();
+
+    public static void markForUpdate(ChunkKey key) {
+        synchronized(set) {
+            set.add(key);
+        }
+    }
+
+    public static void done(ChunkKey key) {
+        synchronized(set) {
+            set.remove(key);
+        }
+    }
+
+    public static boolean shouldBeWritten(ChunkKey key) {
+        synchronized(set) {
+            if (set.contains(key)) {
+                return true;
+            }
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/xymb/NBTDeduplicator.java b/src/main/java/xymb/NBTDeduplicator.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d0eac1e2249ff2e27d2119a44fe26fea2524dce
--- /dev/null
+++ b/src/main/java/xymb/NBTDeduplicator.java
@@ -0,0 +1,296 @@
+package xymb;
+
+import java.util.ArrayList;
+import java.io.IOException;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.nbt.StringTag;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import net.openhft.hashing.LongTupleHashFunction;
+import puregero.multipaper.ChunkKey;
+
+public class NBTDeduplicator {
+    Object2ObjectOpenHashMap<Hash128, ListTag> tags = new Object2ObjectOpenHashMap<>();
+
+    private static NBTDeduplicator instance = null;
+
+    public static NBTDeduplicator instance() {
+        if (instance == null) instance = new NBTDeduplicator();
+        return instance;
+    }
+
+    public static class Hash128 {
+        public long lower, upper;
+
+        Hash128(long[] hash) {
+            this.lower = hash[0];
+            this.upper = hash[1];
+        }
+
+        Hash128(long lower, long upper) {
+            this.lower = lower;
+            this.upper = upper;
+        }
+
+        @Override
+        public boolean equals(final Object o) {
+            if (o instanceof Hash128) {
+                Hash128 other = (Hash128)o;
+                return this.lower == other.lower && this.upper == other.upper;
+            }
+            return false;
+        }
+
+        @Override
+        public int hashCode() {
+            return (int)this.lower;
+        }
+
+        public String hashString() {
+            return String.format("%016x%016x", this.lower, this.upper);
+        }
+    }
+
+    public void addHash(String hash, ListTag tag) {
+        long lower = Long.parseLong(hash.substring(0, 16), 16);
+        long upper = Long.parseLong(hash.substring(16, 32), 16);
+
+        synchronized (tags) {
+//            if (!tags.containsKey(new Hash128(lower, upper))) {
+//                System.out.println("Adding hash " + hash);
+//            }
+            tags.put(new Hash128(lower, upper), tag);
+        }
+    }
+
+    public Hash128 hashNBT(ListTag tag) {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        try {
+            DataOutputStream dos = new DataOutputStream(baos);
+            tag.write(dos);
+        } catch (IOException ex) {
+            System.out.println("Exception in NBT hashing: " + ex);
+            return null;
+        }
+        long[] rawHash = LongTupleHashFunction.xx128().hashBytes(baos.toByteArray());
+        if (rawHash[0] < 0) rawHash[0] *= -1; // Fucking Java doesn't support uints...
+        if (rawHash[1] < 0) rawHash[1] *= -1; // Nor 128 bit numbers
+        return new Hash128(rawHash);
+    }
+
+    public Hash128 hashFromLU(long lower, long upper) {
+        long array[] = new long[2];
+        array[0] = lower;
+        array[1] = upper;
+        return new Hash128(array);
+    }
+
+    public ListTag getFromHash(String hash) {
+        long lower = Long.parseLong(hash.substring(0, 16), 16);
+        long upper = Long.parseLong(hash.substring(16, 32), 16);
+
+        return getFromHash(lower, upper);
+    }
+
+    public boolean containsHash(String hash) {
+        long lower = Long.parseLong(hash.substring(0, 16), 16);
+        long upper = Long.parseLong(hash.substring(16, 32), 16);
+        Hash128 hash128 = hashFromLU(lower, upper);
+        ListTag deduplicated;
+        synchronized (tags) {
+            deduplicated = tags.get(hash128);
+        }
+        return deduplicated != null;
+    }
+
+    public int size() {
+        return tags.size();
+    }
+
+    public ListTag getFromHash(long lower, long upper) {
+        Hash128 hash = hashFromLU(lower, upper);
+        ListTag deduplicated;
+        synchronized (tags) {
+            deduplicated = tags.get(hash);
+        }
+        if (deduplicated == null) return deduplicated;
+        return deduplicated.copy();
+    }
+
+    public String addAndGetHex(ListTag tag) {
+        Hash128 hash = hashNBT(tag);
+        ListTag deduplicated;
+
+        synchronized (tags) {
+            deduplicated = tags.get(hash);
+            if (deduplicated == null) {
+                tags.put(hash, tag.copy());
+            }
+        }
+
+        return hash.hashString();
+    }
+
+    public ListTag makePalette() {
+        var list = new ListTag();
+        int i = 0;
+        synchronized (tags) {
+            for (var entry: tags.entrySet()) {
+                CompoundTag hashTag = new CompoundTag();
+                hashTag.putString("hash", entry.getKey().hashString());
+                hashTag.put("item", entry.getValue());
+                list.add(i, hashTag);
+                i++;
+            }
+        }
+        return list;
+    }
+
+    public CompoundTag reduplicateTagNoCopy(CompoundTag tag) {
+        if (tag == null) return tag;
+        if (!tag.contains("BlockEntityTag")) return tag;
+        CompoundTag blockEntityTag = tag.getCompound("BlockEntityTag");
+        if (!blockEntityTag.contains("hash")) return tag;
+
+//        System.out.println("HASH" + blockEntityTag.getString("hash"))
+        ListTag items = getFromHash(blockEntityTag.getString("hash"));
+        if (items != null) {
+            CompoundTag newBlockEntityTag = tag.getCompound("BlockEntityTag").copy();
+            newBlockEntityTag.put("Items", items);
+            newBlockEntityTag.remove("hash");
+            tag.put("BlockEntityTag", newBlockEntityTag);
+//            System.out.println("REDUPLICATED successfully");
+        } else {
+            Thread.dumpStack();
+            System.out.println("ERROR! Unknown deduplication hash " + blockEntityTag.getString("hash") + " " + blockEntityTag.contains("Items"));
+            if (blockEntityTag.contains("Items"))
+                System.out.println(blockEntityTag.get("Items"));
+        }
+        return tag;
+    }
+
+    public static void deduplicateContainersOnChunkRead(CompoundTag nbt, ChunkKey key) {
+        int regionVersion = nbt.getInt("DataVersion");
+        if (regionVersion < 3120) return; // 1.19.2
+
+        NBTDeduplicator deduplicator = NBTDeduplicator.instance();
+
+        int oldItemHashesSize = deduplicator.size();
+
+        if (nbt.contains("anarchyOptimization")) {
+//            System.out.println("anarchyOptimization! " + key);
+            CompoundTag anarchyOptimization = nbt.getCompound("anarchyOptimization");
+            int version = nbt.getInt("version");
+            ListTag itemPalette = anarchyOptimization.getList("itemPalette", 10);
+            for(int i = 0; i < itemPalette.size(); ++i) {
+                CompoundTag paletteItem = itemPalette.getCompound(i);
+                String hash = paletteItem.getString("hash");
+                deduplicator.addHash(hash, paletteItem.getList("item", 10));
+            }
+        }
+
+        int deduplicatedItems = 0;
+        ListTag nbttaglist3 = nbt.getList("block_entities", 10);
+        for (int k1 = 0; k1 < nbttaglist3.size(); ++k1) {
+            CompoundTag blockEntityNbt = nbttaglist3.getCompound(k1);
+            if (blockEntityNbt.contains("Items")) {
+                ListTag items = blockEntityNbt.getList("Items", 10);
+                for(int i = 0; i < items.size(); ++i) {
+                    CompoundTag itemTag = items.getCompound(i);
+                    if (itemTag.contains("id")) {
+                        String id = itemTag.getString("id");
+                        if (id.contains("shulker_box")) {
+                            if (itemTag.contains("tag")) {
+                                CompoundTag tag = itemTag.getCompound("tag");
+                                if (tag.contains("BlockEntityTag")) {
+                                    CompoundTag blockEntityTag = tag.getCompound("BlockEntityTag");
+                                    if (blockEntityTag.contains("Items")) {
+                                        ListTag itemsInsideTag = blockEntityTag.getList("Items", 10);
+                                        String hash = deduplicator.addAndGetHex(itemsInsideTag);
+
+                                        blockEntityTag.remove("Items");
+                                        blockEntityTag.putString("hash", hash);
+                                        deduplicatedItems++;
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        if (deduplicator.size() != oldItemHashesSize)
+            System.out.println("Item hashes " + deduplicator.size());
+        if (deduplicatedItems > 0 && !nbt.contains("anarchyOptimization")) {
+            DeduplicatorUpdateManager.markForUpdate(key);
+        }
+    }
+
+    public static void deduplicateContainersOnWrite(CompoundTag nbt) {
+        if (nbt == null) return;
+//        System.out.println("Deduplicate!");
+        int hash = 0;
+        int item = 0;
+        int both = 0;
+        NBTDeduplicator globalDeduplicator = NBTDeduplicator.instance();
+        NBTDeduplicator deduplicator = new NBTDeduplicator();
+
+        ListTag nbttaglist3 = nbt.getList("block_entities", 10);
+        for (int k1 = 0; k1 < nbttaglist3.size(); ++k1) {
+            CompoundTag blockEntityNbt = nbttaglist3.getCompound(k1);
+            if (blockEntityNbt.contains("Items")) {
+                ListTag items = blockEntityNbt.getList("Items", 10);
+                for(int i = 0; i < items.size(); ++i) {
+                    CompoundTag itemTag = items.getCompound(i);
+                    if (itemTag.contains("id")) {
+                        String id = itemTag.getString("id");
+                        if (id.contains("shulker_box")) {
+                            if (itemTag.contains("tag")) {
+                                CompoundTag tag = itemTag.getCompound("tag");
+                                if (tag.contains("BlockEntityTag")) {
+                                    CompoundTag blockEntityTag = tag.getCompound("BlockEntityTag");
+                                    CompoundTag newBlockEntityTag = blockEntityTag.copy();
+                                    tag.put("BlockEntityTag", newBlockEntityTag);
+                                    blockEntityTag = newBlockEntityTag;
+                                    boolean hasHash = false;
+                                    if (blockEntityTag.contains("hash")) {
+                                        if (!deduplicator.containsHash(blockEntityTag.getString("hash"))) {
+                                            deduplicator.addHash(blockEntityTag.getString("hash"), globalDeduplicator.getFromHash(blockEntityTag.getString("hash")));
+                                        }
+                                        hasHash = true;
+                                        hash++;
+                                    }
+                                    if (blockEntityTag.contains("Items")) {
+                                        String hashTag = deduplicator.addAndGetHex(blockEntityTag.getList("Items", 10));
+                                        globalDeduplicator.addHash(hashTag, blockEntityTag.getList("Items", 10));
+                                        blockEntityTag.remove("Items");
+                                        blockEntityTag.putString("hash", hashTag);
+                                        if (hasHash) both++;
+                                        item++;
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        if (hash > 0 || item > 0) {
+            CompoundTag anarchyOptimization = new CompoundTag();
+            anarchyOptimization.putInt("version", 1);
+            anarchyOptimization.put("itemPalette", deduplicator.makePalette());
+            nbt.put("anarchyOptimization", anarchyOptimization);
+        }
+
+        if (hash > 0 || item > 0 || both > 0) {
+            System.out.println("Deduplication report - " + hash + " " + item + " " + both);
+        }
+    }
+
+    // TODO: Reverting to duplicated
+
+}
