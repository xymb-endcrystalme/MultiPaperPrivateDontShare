From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Mon, 28 Nov 2022 17:22:31 +0100
Subject: [PATCH] Optimize stashes by removing unnecessary NBT copy


diff --git a/src/main/java/net/minecraft/world/ContainerHelper.java b/src/main/java/net/minecraft/world/ContainerHelper.java
index 4092c7a8c2b0d9d26e6f4d97386735236300d132..0816f63fc019ed94566da9ea5266e991d4884485 100644
--- a/src/main/java/net/minecraft/world/ContainerHelper.java
+++ b/src/main/java/net/minecraft/world/ContainerHelper.java
@@ -28,7 +28,7 @@ public class ContainerHelper {
             if (!itemStack.isEmpty()) {
                 CompoundTag compoundTag = new CompoundTag();
                 compoundTag.putByte("Slot", (byte)i);
-                itemStack.save(compoundTag);
+                itemStack.saveRapidUnsafe(compoundTag); // MultiPaper
                 listTag.add(compoundTag);
             }
         }
@@ -47,7 +47,7 @@ public class ContainerHelper {
             CompoundTag compoundTag = listTag.getCompound(i);
             int j = compoundTag.getByte("Slot") & 255;
             if (j >= 0 && j < stacks.size()) {
-                stacks.set(j, ItemStack.of(compoundTag));
+                stacks.set(j, ItemStack.ofRapidUnsafe(compoundTag));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 9baea44c3ca98a695ef1317147188cdcbb39978b..8f4b029b67d3c33f5ae64f1974772496b2a21f21 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -264,13 +264,24 @@ public final class ItemStack {
         this.emptyCacheFlag = this.isEmpty();
     }
 
-    // CraftBukkit - break into own method
+    // MultiPaper start
     private void load(CompoundTag nbttagcompound) {
+        this.load(nbttagcompound, false);
+    }
+    // MultiPaper end
+
+    // CraftBukkit - break into own method
+    private void load(CompoundTag nbttagcompound, boolean rapidUnsafe) { // MultiPaper
         this.item = (Item) Registry.ITEM.get(new ResourceLocation(nbttagcompound.getString("id")));
         this.count = nbttagcompound.getByte("Count");
         if (nbttagcompound.contains("tag", 10)) {
             // CraftBukkit start - make defensive copy as this data may be coming from the save thread
-            this.tag = nbttagcompound.getCompound("tag").copy();
+            // MultiPaper start
+            if (rapidUnsafe) {
+                this.tag = nbttagcompound.getCompound("tag");
+            } else {
+                this.tag = nbttagcompound.getCompound("tag").copy();
+            }
             // CraftBukkit end
             this.processEnchantOrder(this.tag); // Paper
             this.processText(); // Paper
@@ -284,20 +295,31 @@ public final class ItemStack {
         markDirty(); // MultiPaper
     }
 
-    private ItemStack(CompoundTag nbt) {
-        this.load(nbt);
+    private ItemStack(CompoundTag nbt, boolean rapidUnsafe) { // MultiPaper
+        this.load(nbt, rapidUnsafe);
         // CraftBukkit end
         this.updateEmptyCacheFlag();
     }
 
     public static ItemStack of(CompoundTag nbt) {
         try {
-            return new ItemStack(nbt);
+            return new ItemStack(nbt, false); // MultiPaper
+        } catch (RuntimeException runtimeexception) {
+            ItemStack.LOGGER.debug("Tried to load invalid item: {}", nbt, runtimeexception);
+            return ItemStack.EMPTY;
+        }
+    }
+
+    // MultiPaper start
+    public static ItemStack ofRapidUnsafe(CompoundTag nbt) {
+        try {
+            return new ItemStack(nbt, true);
         } catch (RuntimeException runtimeexception) {
             ItemStack.LOGGER.debug("Tried to load invalid item: {}", nbt, runtimeexception);
             return ItemStack.EMPTY;
         }
     }
+    // MultiPaper end
 
     public boolean isEmpty() {
         return this == ItemStack.EMPTY || this.item == null || this.item == Items.AIR || this.count <= 0; // Paper
@@ -529,6 +551,20 @@ public final class ItemStack {
         return nbt;
     }
 
+    // MultiPaper start
+    public CompoundTag saveRapidUnsafe(CompoundTag nbt) {
+        ResourceLocation minecraftkey = Registry.ITEM.getKey(this.getItem());
+
+        nbt.putString("id", minecraftkey == null ? "minecraft:air" : minecraftkey.toString());
+        nbt.putByte("Count", (byte) this.count);
+        if (this.tag != null) {
+            nbt.put("tag", this.tag);
+        }
+
+        return nbt;
+    }
+    // MultiPaper end
+
     public int getMaxStackSize() {
         return this.getItem().getMaxStackSize();
     }
